<li>Caption</li>
                            <li>Lock screen</li>
                            <li>Additional settings</li>

                            .playbackSpeed {
                                display: flex;
                                position: relative;
                                width: 100%;
                                height: 100%;
                            }
                            .playbackSpeed .playback span {
                                display: block;
                                font-size: 14px;
                                font-weight: 300px;
                                padding: 15px 30px;
                                border: 1px solid rgb(83, 83, 83);
                            }
                            .playbackSpeed .playback ul {
                                position: relative;
                            }
                            .playbackSpeed .playback li {
                                position: relative;
                                width: 100%;
                                cursor: pointer;
                                text-align: left;
                                padding: 12px 33px;
                                display: block;
                                font-size: 14px;
                            }
                            .playbackSpeed .playback li:hover {
                                background: rgba(28, 28, 28, 0.9);
                            }
                            .playbackSpeed .playback li.active::before {
                                content: '\e876';
                                font-family: "material symbols outlined";
                                position: absolute;
                                left: 7px;
                                top: 50%;
                                transform: translateY(-50%);
                                padding-right: 10px;
                                font-size: 18px;
                                
                            }
                            .playbackSpeed::-webkit-scrollbar {
                                width: 8;
                                background: transparent;
                            }
                            .playbackSpeed::-webkit-scrollbar-thumb {
                                height: 20px;
                                border: 2px solid transparent;
                                background: rgba(83, 83, 83, 0.9);
                                border-radius: 20px;
                            }



                            <span>Playback Speed</span>
                            <li  value="0.25">0.25</li>
                            <li  value="0.5">0.5</li>
                            <li  value="0.75">0.75</li>
                            <li  value="1" class="active">Normal</li>
                            <li  value="1.25">1.25</li>
                            <li  value="1.5">1.5</li>
                            <li  value="1.75">1.75</li>
                            <li  value="2">2</li>


                            document.addEventListener("keydown", e => {
                                const tagName = document.activeElement.tagName.toLowerCase()
                              
                                if (tagName === "input") return
                              
                                switch (e.key.toLowerCase()) {
                                  case " ":
                                    if (tagName === "button") return
                                  case "k":
                                    togglePlay()
                                    break
                                  case "f":
                                    toggleFullscreen()
                                    break
                                  case "t":
                                    toggleTheaterMode()
                                    break
                                  case "i":
                                    toggleMiniPlayerMode()
                                    break
                                  case "m":
                                    toggleMute()
                                    break
                                  case "arrowleft":
                                  case "j":
                                    skip(-5)
                                    break
                                  case "arrowright":
                                  case "l":
                                    skip(5)
                                    break
                                  case "c":
                                    toggleCaptions()
                                    break
                                }
                              })

                                  transition: 1s ease-in-out;

    if (rangeCustomPlayback.value == 0) {
        mainVideo.playbackRate= 0.25;
        PlaybackRangeValue.innerHTML="0.25"
    } else if (rangeCustomPlayback.value == 25) {
        mainVideo.playbackRate= 0.5;
        PlaybackRangeValue.innerHTML="0.5"
    } else if (rangeCustomPlayback.value == 50) {
        mainVideo.playbackRate= 0.75;
        PlaybackRangeValue.innerHTML="0.75"
    } else if (rangeCustomPlayback.value == 75) {
        mainVideo.playbackRate= 1.0;
        PlaybackRangeValue.innerHTML="1"
    } else if (rangeCustomPlayback.value == 100) {
        mainVideo.playbackRate= 1.25;
        PlaybackRangeValue.innerHTML="1.25"
    } else if (rangeCustomPlayback.value == 125) {
        mainVideo.playbackRate= 1.5;
        PlaybackRangeValue.innerHTML="1.5"
    } else if (rangeCustomPlayback.value == 150) {
        mainVideo.playbackRate= 1.75;
        PlaybackRangeValue.innerHTML="1.75"
    } else if (rangeCustomPlayback.value == 175) {
        mainVideo.playbackRate= 2;
        PlaybackRangeValue.innerHTML="2"
    }






    settingsContainer.classList.contains("setContOpen")

setting.addEventListener('click',() => {
    if (settingsContainer.classList.contains("setContOpen")) {
        settingsContainer.classList.remove("setContOpen")
    } else {
        settingsContainer.classList.add("setContOpen")
    }
    
})

playbackSpeedBtn.addEventListener('click',() => {
    mainSettings.classList.add("setLeftClosed");
    playbackSpeedContainer.style.display="block"
    setTimeout(function(){
        playbackSpeedContainer.classList.add("playbackSpeedContainerOpen");
    }, 50);  
    

})
playbackCloseBtn.addEventListener('click',() => {
    setTimeout(function(){
         playbackSpeedContainer.style.display="none"
    }, 50);  
    mainSettings.classList.remove("setLeftClosed");
    playbackSpeedContainer.classList.remove("playbackSpeedContainerOpen");
})

.setContOpen {
    display: block;
    opacity: 1;
    animation: fade-in 350ms;
}
.setContClose {
    display: none;
    opacity: 0;
    animation: fade-out 350ms;
}
.setLeftClosed {
    opacity: 0;
    left: -100%;
}
    

    display: none;
    opacity: 0;


divmain
  divprogresbar
    divprogresbuffer

#MainProgresInput {
    display: flex;
    position:absolute;
    margin: auto;
    width: 100%;
    height: 15px;
}
.progressBarBufBg {
    position: relative;
    margin: auto;
    width: 98%;
    height: 4px;
    background: #f0f0f063;
    pointer-events: none;
    user-select: none;
    -webkit-user-select: none;
}
.progressBuffer {
    position: absolute;
    width: 100%;
    height: 4px;
    pointer-events: none;
    user-select: none;
    -webkit-user-select: none;
}

<div class="playbackSpeedContainer">
    <div class="playback">
        <ul>
            <img src="./assets/icons/Chevron-left.svg" alt="" id="playbackCloseBtn">
            <span>Playback Speed</span><span id="customLinkRangePlayback">Custom</span>
        </ul>
        <li id="customPlaybackNotif"></li>
        <li data-speed="0.25">0.25</li>
        <li data-speed="0.5">0.5</li>
        <li data-speed="0.75">0.75</li>
        <li data-speed="1" class="active">Normal</li>
        <li data-speed="1.25">1.25</li>
        <li data-speed="1.5">1.5</li>
        <li data-speed="1.75">1.75</li>
        <li data-speed="2">2</li>
    </div>
</div>
<div class="customRangePlaybackContainer">
    <ul>
        <img src="./assets/icons/Chevron-left.svg" alt="">
        <span>Custom</span>
    </ul>
    <p id="PlaybackRangeValue">1</p>
    <input type="range" min="25" max="200" value="100" step="5" id="rangeCustomPlayback">
</div>



<div class="playbackSpeedContainer">
                        <div class="playback">
                            <ul>
                                <img src="./assets/icons/Chevron-left.svg" alt="" id="playbackCloseBtn">
                                <span>Playback Speed</span><span id="customLinkRangePlayback">Custom</span>
                            </ul>
                            <li id="customPlaybackNotif"></li>
                            <li data-speed="0.25">0.25</li>
                            <li data-speed="0.5">0.5</li>
                            <li data-speed="0.75">0.75</li>
                            <li data-speed="1" class="active">Normal</li>
                            <li data-speed="1.25">1.25</li>
                            <li data-speed="1.5">1.5</li>
                            <li data-speed="1.75">1.75</li>
                            <li data-speed="2">2</li>
                        </div>
                    </div>
                    <div class="customRangePlaybackContainer">
                        <ul>
                            <img src="./assets/icons/Chevron-left.svg" alt="">
                            <span>Custom</span>
                        </ul>
                        <p id="PlaybackRangeValue">1</p>
                        <input type="range" min="25" max="200" value="100" step="5" id="rangeCustomPlayback">
                    </div>


                    else {
                        customPlaybackStatus.style.display="block";
                        customPlaybackStatus.textContent=cusPlayback;
                        togglePlaybackStatus.textContent=cusPlayback;
                        removePlaybackActiveClasses(playback);
                        customPlaybackStatus.classList.add("active");
                    }

                    rangeProgress.addEventListener('input', function(){
                        const time = (rangeProgress.value / 100) * mainVideo.duration;
                        mainVideo.currentTime = time;
                    });
                    rangeProgress.oninput = function(){
                        progressShadow.style.width = rangeProgress.value + "%";
                    }
                    rangeProgress.value = proggres;

                    playback.forEach(playback => {
                        playback.addEventListener("click", () => {
                        removeActiveClasses(playback);
                        playback.classList.add("active");
                      });
                    });
                    function removeActiveClasses() {
                        playback.forEach(playback => {
                            playback.classList.remove("active");
                        })
                    }


                    mainVideo.addEventListener('timeupdate', function() {
                        const proggres = (mainVideo.currentTime / mainVideo.duration) * 100;
                        rangeProgress.value = proggres;
                        progressShadow.style.width = proggres + "%";
                    });
                    rangeProgress.addEventListener('input', function(){
                        const time = (rangeProgress.value / 100) * mainVideo.duration;
                        mainVideo.currentTime = time;
                    });
                    rangeProgress.oninput = function(){
                        progressShadow.style.width = rangeProgress.value + "%";
                    }


                    settingsBtn 
                    settings 
                    settingHome 
                    
                    captions 
                    caption_labels 

                    width: 848px;
                    height: 478px;

                    autoplay.onmouseover = volumeBtn.onmouseout = handler;
caption.onmouseover = caption.onmouseout = handler;
pictureInPicture.onmouseover = pictureInPicture.onmouseout = handler;
fullscreen.onmouseover = fullscreen.onmouseout = handler;

                    
videoPlayer.addEventListener('mousemove', toggleControllerActive);

playPause.addEventListener('click', toggleControllerActive);

buttonControllers.addEventListener('click', toggleControllerActive);

playPauseMobile.addEventListener('click', toggleControllerActive);

fastRewind.addEventListener('click', toggleControllerActive);
fastForward.addEventListener('click', toggleControllerActive);


fastRewind.addEventListener('mouseover',() => {
    controllers.classList.add('active');
    controllersMobile.classList.add('active');
});
fastForward.addEventListener('mouseover',() => {
    controllers.classList.add('active');
    controllersMobile.classList.add('active');
});

#rangeProgress {
    -webkit-appearance: none;
    appearance: none;
    margin: auto;
    width: 99%;
    background: transparent;
    cursor: pointer;
    border: none;
    -webkit-tap-highlight-color: transparent;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
#rangeProgress::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 12px;
    height: 12px;
    background: rgb(255, 0, 0);
    box-shadow: 0px 0px 0px 2px red;
    border-radius: 50%;
    scale: 1;
    transition: 150ms all;
}

.progressBarBufBg {
    position: relative;
    margin: auto;
    width: 98%;
    height: 4px;
    background: #f0f0f063;
    pointer-events: none;
    user-select: none;
    -webkit-user-select: none;
}

mainVideoLeftMinorSensor.addEventListener('mousemove',() => {
    if (mainVideo.paused) return;
    controllers.classList.remove('active');
    controllersMobile.classList.remove('active');
});
mainVideoLeftMinorSensor=videoPlayer.querySelector('.mainVideoLeftMinorSensor'),
mainVideoClickF.addEventListener('click', togglePlay);

                    .controllers {
                        position: absolute;
                        height: 100%;
                        width: 100%;
                        background: rgba(255, 0, 0, 0.21);
                    }
                
                    .progressContainer {
                        width: 100%;
                        position: absolute;
                        z-index: 10;
                        top: -100%;
                        transform: translateY(100%);
                    }





                    auto_play.addEventListener("click", () => {
                        auto_play.classList.toggle("active");
                        if (auto_play.classList.contains("active")) {
                          auto_play.title = "Autoplay is on";
                        } else {
                          auto_play.title = "Autoplay is off";
                        }
                      });









